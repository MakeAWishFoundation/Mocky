import Foundation
import PathKit

public enum Assets {

    public enum AllTypes {
        public static let swifttemplate: AssetFile = Files.allTypes
    }
    
    public enum MockConfiguration {
        public static let swifttemplate: AssetFile = Files.mock
    }

    public enum swifttemplate {
        public static let allTypes: AssetFile = Files.allTypes
        public static let mock: AssetFile = Files.mock
    }
}

public protocol AssetFile {

    var name: String { get }
    var data: Data { get }

    func write(to path: Path) throws
}

private struct File: AssetFile {

    let name: String
    let contents: String
    var data: Data { return Data(base64Encoded: contents) ?? Data() }

    func write(to path: Path) throws {
        try path.write(data)
    }
}

private enum Files {
    static let allTypes = File(
        name: "AllTypes.swifttemplate",
        contents: "dHlwZXM6CjwlXyB2YXIgYWxsID0gdHlwZXMuYWxsCiAgICBhbGwgKz0gdHlwZXMucHJvdG9jb2xzLm1hcCB7ICQwIH0gLSU+CjwlXyBmb3IgdHlwZSBpbiBhbGwgeyAtJT48JV8gLSU+CiAgPCVfIGxldCBhdXRvTW9ja2FibGU6IEJvb2wgPSB0eXBlLmluaGVyaXRlZFR5cGVzLmNvbnRhaW5zKCJBdXRvTW9ja2FibGUiKSB8fCB0eXBlLmFubm90YXRpb25zWyJBdXRvTW9ja2FibGUiXSAhPSBuaWwgLSU+CiAgPCVfIGlmIGF1dG9Nb2NrYWJsZSB7IC0lPgogICAgLSA8JT0gdHlwZS5uYW1lICU+CiAgPCVfIH0gLSU+CjwlXyB9IC0lPg=="
    )
    static let mock = File(
        name: "Mock.swifttemplate",
        contents: ""
    )
}
